/*
 * -------------------- DO NOT REMOVE OR MODIFY THIS HEADER --------------------
 * 
 * Copyright (C) 2014 The Iguanod Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * A copy of the License should accompany this file or the folder or folder
 * hierarchy where this file is located, or should have been provided by whoever
 * or wherever you obtained this file. If that is not the case you may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied;
 * and no Contributor shall be liable for damages, including any direct,
 * indirect, special, incidental, or consequential damages of any character
 * arising as a result of this License or out of the use or inability to use
 * the Work (including but not limited to damages for loss of goodwill, work
 * stoppage, computer failure or malfunction, or any and all other commercial
 * damages or losses), even if such Contributor has been advised of the
 * possibility of such damages.
 * 
 * See the License for further details and the specific language governing
 * permissions and limitations under the License.
 */
package es.iguanod.algorithms;

import es.iguanod.util.Maybe;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

/**
 * This class provides an implementation of the <a
 * href="http://en.wikipedia.org/wiki/Backtracking">backtracking</a> algorithm.
 * This algorithm is used for finding solutions to some computational problem,
 * that incrementally builds candidates to the solutions, abandoning them as
 * soon as possible one they can't lead to a solution (follow the link for more
 * details).
 *
 * <p>To solve a problem using this class, one has to model said problem with
 * the {@link es.iguanod.algorithms.Backtracking.Backtrackable Backtrackable}
 * interface.</p>
 *
 * <p>The algorithm develops as follows: for every state (partial or full
 * solution) examined, starting with the initial one (constructed with the
 * {@link es.iguanod.algorithms.Backtracking.Backtrackable#initialState() initialState()}
 * method), the method
 * {@link es.iguanod.algorithms.Backtracking.Backtrackable#isSolution(Object) isSolution(state)}
 * checks wether it is a full solution. Then, that state is expanded obtaining
 * new states with the
 * {@link es.iguanod.algorithms.Backtracking.Backtrackable#stateIterator(Object) stateIterator(state)}
 * method. For every new state, if they aren't rejected by the
 * {@link es.iguanod.algorithms.Backtracking.Backtrackable#reject(Object) reject(state)}
 * method, the algorithm loops applying it the whole process.</p>
 *
 * <p>If any operation needs to be done when a solution is rejected, it can be
 * performed inside the
 * {@link es.iguanod.algorithms.Backtracking.Backtrackable#reject(Object) reject(state)}
 * method, as there is guarantee the method will be called exactly once per
 * generated state. In a similar way, if an operation needs to be performed when
 * a state is accepted as solution, it can be performed inside the
 * {@link es.iguanod.algorithms.Backtracking.Backtrackable#isSolution(Object) isSolution(state)}
 * method, as it will be called exactly once per non-rejected state.</p>
 *
 * @see <a href="http://en.wikipedia.org/wiki/Backtracking">Wikipedia article
 * about backtracking</a>
 *
 * @author <a href="mailto:rubiof.david@gmail.com">David Rubio Fernández</a>
 * @since 0.0.8.1.a
 * @version 1.0.1.1.b
 */
public final class Backtracking{

	/**
	 * Uninstantiable class
	 */
	private Backtracking(){
	}

	/**
	 * Class used to model a problem to be solved with the
	 * {@link es.iguanod.algorithms.Backtracking Backtracking} algorithm.
	 *
	 * <p>It is guaranteed that the objects passed to the {@link es.iguanod.algorithms.Backtracking.Backtrackable#reject(Object) reject(state)},
	 * {@link es.iguanod.algorithms.Backtracking.Backtrackable#isSolution(Object) isSolution(state)}
	 * and
	 * {@link es.iguanod.algorithms.Backtracking.Backtrackable#stateIterator(Object) stateIterator(state)}
	 * methods will allways be states generated by either the
	 * {@link es.iguanod.algorithms.Backtracking.Backtrackable#initialState() initialState()}
	 * or the
	 * {@link es.iguanod.algorithms.Backtracking.Backtrackable#stateIterator(Object) stateIterator(state)}
	 * methods.</p>
	 *
	 * @param <T> class of the objects used as states (partial or full
	 * solutions to the problem), that will be passed around to the various
	 * methods.
	 *
	 * @author <a href="mailto:rubiof.david@gmail.com">David Rubio
	 * Fernández</a>
	 * @since 0.0.8.1.a
	 * @version 1.0.1.1.b
	 */
	public static interface Backtrackable<T>{

		/**
		 * Constructs the first state to be examined by the Backtracking
		 * algorithm.
		 *
		 * @return the initial state
		 */
		public T initialState();

		/**
		 * Decides wether a state cannot possibly be expanded into a
		 * solution and must be consecuently discarded. Note that if it is
		 * not possible to know for sure if the state won't lead to a
		 * solution without expanding it any further, this method should
		 * return false.
		 *
		 * @param state the state to be decided if has to be rejected
		 *
		 * @return {@code true} if the state has to be rejected,
		 * {@code false} otherwise
		 */
		public boolean reject(T state);

		/**
		 * Decides wether a state is a solution to the problem. Note that if
		 * state is declared as solution, it will not neccessarily stop
		 * being expanded any further, that depends on the function used to
		 * backtrack.
		 *
		 * @param state the state to be decided if is a solution
		 *
		 * @return {@code true} if the state is a solution, {@code false}
		 * otherwise
		 */
		public boolean isSolution(T state);

		/**
		 * Generates new candidates to be explored by incrementing the state
		 * passed as argument.
		 *
		 * @param state the state to be expanded
		 *
		 * @return an iterator of the new states to be explored
		 */
		public Iterator<T> stateIterator(T state);
	}

	/**
	 * Searches for a solution to the problem modeled by the
	 * {@code Backtrackable} passed as argument using the backtracking
	 * algorithm. If a solution is found, it is returned, without expanding it
	 * any further or looking for more solutions.
	 *
	 * @param <T> class of the objects used as states (partial or full
	 * solutions to the problem)
	 *
	 * @param bt model of the problem to be solved
	 *
	 * @return a {@link es.iguanod.util.Maybe Maybe} object,
	 * {@link es.iguanod.util.Maybe#ABSENT absent} if no solution has been
	 * found, or wrapping the first solution found
	 */
	public static <T> Maybe<T> backtrack(Backtrackable<T> bt){

		return Backtracking.<T>backtrack(bt, bt.initialState());
	}

	/**
	 * Method that actually does the backtrack.
	 *
	 * @param state the initial state (bt.initialState())
	 *
	 * @return the solution
	 */
	private static <T> Maybe<T> backtrack(Backtrackable<T> bt, T state){

		if(bt.isSolution(state)){
			return Maybe.<T>from(state);
		}

		Iterator<T> iter=bt.stateIterator(state);
		while(iter.hasNext()){
			T next=iter.next();
			if(!bt.reject(next)){
				Maybe<T> ret=backtrack(bt, next);
				if(ret.isPresent()){
					return ret;
				}
			}
		}

		return Maybe.ABSENT;
	}

	/**
	 * Searches for all the solutions to the problem modeled by the
	 * {@code Backtrackable} passed as argument using the backtracking
	 * algorithm. If a solution is found, it is only expanded (that is, the
	 * {@link es.iguanod.algorithms.Backtracking.Backtrackable#stateIterator(Object) stateIterator(state)}
	 * method is only called) if the {@code expand_solutions} parameter is
	 * {@code true}.
	 *
	 * @param <T> class of the objects used as states (partial or full
	 * solutions to the problem)
	 *
	 * @param bt model of the problem to be solved
	 * @param expand_solutions true if a solution has to be expanded any
	 * further, {@code false} otherwise
	 *
	 * @return a {@code Collection} containing all the found solutions (or an
	 * empty {@code Collection} if no solution is found)
	 */
	public static <T> Collection<T> backtrackAll(Backtrackable<T> bt, boolean expand_solutions){

		ArrayList<T> solutions=new ArrayList<>();
		Backtracking.<T>backtrackAll(bt, bt.initialState(), expand_solutions, solutions);

		return solutions;
	}

	/**
	 * Method that actually does the backtrack
	 *
	 * @param state the initial state
	 * @param solutions an empty collection that will contain all the results
	 * once the method returns
	 */
	private static <T> void backtrackAll(Backtrackable<T> bt, T state, boolean expand_solutions, Collection<T> solutions){

		if(bt.isSolution(state)){
			solutions.add(state);
			if(!expand_solutions){
				return;
			}
		}

		Iterator<T> iter=bt.stateIterator(state);
		while(iter.hasNext()){
			T next=iter.next();
			if(!bt.reject(next)){
				backtrackAll(bt, next, expand_solutions, solutions);
			}
		}
	}
}
